{"version":3,"sources":["socket_context/context.js","UserList.js","ChatMessages.js","MessageConsole.js","Login.js","sockets/index.js","sockets/events.js","sockets/emit.js","socket_context/index.js","App.js","serviceWorker.js","index.js"],"names":["SocketContext","createContext","changeColor","newColor","setNewUserRegister","userName","userList","isCurrentUserOnline","UserList","props","useContext","console","log","map","user","index","key","messages","length","message","senderName","useStyles","makeStyles","theme","root","margin","spacing","width","MessageConsole","initialValue","useState","formValue","setFormValue","setValue","input","value","onChange","e","target","useFormInput","classes","className","noValidate","autoComplete","onSubmit","event","preventDefault","socket","emit","alert","TextField","id","label","Button","type","variant","color","display","minWidth","flexWrap","m2","Login","Paper","elevation","Box","justifyContent","alignItems","name","io","initSockets","on","payload","newUserList","loggedUsers","state","i","concat","socketEvents","registerUser","SocketProvider","useEffect","Provider","children","App","align-self","ChatMessages","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.68fc82d4.chunk.js","sourcesContent":["import { createContext } from \"react\"; \nconst SocketContext = createContext({\n    changeColor: (newColor) => {},\n    setNewUserRegister: (userName) => {},\n    userList: [],\n    isCurrentUserOnline: false\n}); \nexport default SocketContext;","import React, { useContext } from 'react';\nimport SocketContext from './socket_context/context'\n\nfunction UserList(props) {    \n    const {userList} = useContext(SocketContext);\n    console.log('userList', userList)\n    return (\n        <div>\n            <h1>Clients connected:</h1>\n            <ol>\n            {\n                userList.map((user, index) =>(                \n                <li key={index}> \n                    {user} \n                </li>                   \n                ))\n            }\n            </ol>  \n        </div>\n    );\n}\n\nexport default UserList;\n","import React, { useContext } from 'react';\nimport SocketContext from './socket_context/context'\n\nfunction UserList(props) {    \n    const {messages} = useContext(SocketContext);\n    console.log('messages', messages)\n\n\n    \n    return (\n        <div>\n          <h1>Messages:</h1>\n          { messages.length === 0 && <h4>No messages. Be the first to send a message!</h4> }\n\n          { \n              messages.map((message, index) =>(                \n                <span key={index}> \n                    {message.senderName}: {message.message} \n                    <br></br>\n                </span>\n              ))\n            \n          }\n       </div>  \n    );\n}\n\nexport default UserList;\n","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport SocketContext from './socket_context/context'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: 200,\n    },\n  },\n}));\n\n\nfunction MessageConsole(props) {\n  const message = useFormInput(\"\")\n\n  function send(event) {\n    event.preventDefault()\n    if (!message.input.value || message.input.value === \"\" ) {\n      alert(\"Cannot send empty message\")\n      return;\n    }\n    console.log('event send.message', message.input.value)\n    props.socket.emit('send.message', message.input.value)\n    message.setValue(\"\")\n  }\n\n  const classes = useStyles();\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={send}>\n      <TextField id=\"standard-basic\" label=\"Type some message here\" {... message.input} />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        Send\n      </Button>\n    </form>\n  );\n}\n\nfunction useFormInput(initialValue) {\n  const [formValue, setFormValue] = useState(initialValue)\n  \n  function handleFormValueChange(e) {\n    setFormValue(e.target.value)\n  }\n\n  return {\n    setValue: setFormValue,\n    input: {\n      value: formValue,\n      onChange: handleFormValueChange\n    }\n  }\n}\n\nexport default MessageConsole;\n","import React, {useContext} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport SocketContext from './socket_context/context'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    width: '40%',\n    margin: '0 auto',\n    minWidth: '400px',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(10)\n    }\n  },\n  m2: {\n    margin: '2px'\n  }\n}));\n\nfunction Login(props) {\n  const { setNewUserRegister } = useContext(SocketContext);\n  function enter(event) {\n    event.preventDefault()\n    setNewUserRegister(event.target.userName.value)\n  }\n  const classes = useStyles();\n  return (\n    <Paper className={classes.root} elevation={3}>\n      <form noValidate autoComplete=\"off\" onSubmit={enter}>\n        <h2>ReactChat</h2>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <TextField className={classes.m2} name=\"userName\" id=\"username\" label=\"username\" />\n          <Button className={classes.m2} type=\"submit\" variant=\"contained\" color=\"primary\">\n            Enter\n          </Button>\n        </Box>\n      </form>\n    </Paper>\n  );\n}\n\nexport default Login;\n","import io from \"socket.io-client\";\nimport { socketEvents } from \"./events\";\nimport { getQueueLength } from \"./emit\";\nimport { changeColorToServer, registerNewUser } from \"./emit\";\nexport const socket = io();\n\nexport const initSockets = ({ setValue }) => {\n    socketEvents({ setValue });\n    getQueueLength();\n};\nexport const changeColor = (newColor) => {\n    changeColorToServer(newColor);\n};\nexport const registerUser = (userName) => {\n    registerNewUser(userName);\n};","import { socket } from './index';\n\nexport const socketEvents = ({ setValue }) => {\n    socket.on('user.online', (payload) => {\n        const newUserList = payload.loggedUsers\n        setValue(state => {\n            console.log('{ ...state, userList: newUserList }', )\n            return { ...state, userList: newUserList.map(i => i.name) }\n        });\n    });\n    socket.on('user.login', () => {\n        setValue(state => {\n            return { ...state, isCurrentUserOnline: true } \n        });\n    });\n    socket.on('user.offline', (payload) => {\n        const newUserList = payload.loggedUsers        \n        setValue(state => {\n            return { ...state, userList: newUserList } \n        });\n    });\n    socket.on('user.logoff', () => {\n        setValue(state => {\n            return { ...state, isCurrentUserOnline: false };\n        });\n    });\n\n    socket.on('message.from.user', (payload) => {\n        setValue(state => {\n            return { ...state, messages:  state.messages.concat([payload]) } \n        });\n    });\n};","import { socket } from \"./index\";\n\nexport const addClientToQueue = () => {\n    socket.emit('addClientIdToQueue');\n};\n\nexport const getQueueLength = () => {\n    socket.emit('queueLengthToSocket');\n};\n\nexport const removeUserFromQueue = () => {\n    socket.emit('removeUserFromQueue');\n}; export const changeColorToServer = (payload) => {\n    socket.emit('changeColor', payload)\n}; export const registerNewUser = (payload) => {\n    socket.emit('registerNewUser', payload)\n};","import React, { useState, useEffect } from \"react\";\nimport SocketContext from \"./context\";\nimport { initSockets, changeColor, registerUser } from \"../sockets\";\n\nconst SocketProvider = (props) => {\n  \n  const [value, setValue] = useState({\n    userList: [],\n    messages: [],\n    isCurrentUserOnline: false,\n    changeColor: props => { changeColor(props) },\n    setNewUserRegister: props => { registerUser(props) },\n  });\n  useEffect(() => initSockets({ setValue }), []);\n\n  return (\n    <SocketContext.Provider value={value}>\n      {props.children}\n    </SocketContext.Provider>\n  )\n}; \nexport default SocketProvider; ","import React, { useContext } from 'react';\nimport Box from '@material-ui/core/Box';\nimport './App.css';\n\nimport UserList from './UserList';\nimport ChatMessages from './ChatMessages';\nimport MessageConsole from './MessageConsole'\nimport Login from './Login'\nimport SocketContext from './socket_context/context'\nimport SocketProvider from \"./socket_context\";\nimport { socket } from './sockets/index';\n\nfunction App() {\n  const {isCurrentUserOnline} = useContext(SocketContext);\n\n  return (\n    <Box align-self=\"center\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n      {!isCurrentUserOnline && <Login></Login>}\n      {isCurrentUserOnline &&\n        <div>\n          <ChatMessages></ChatMessages>\n          <MessageConsole socket={socket}></MessageConsole>\n          <UserList></UserList>\n        </div>\n      }\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport SocketProvider from './socket_context';\n\nReactDOM.render(<SocketProvider><App /></SocketProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}